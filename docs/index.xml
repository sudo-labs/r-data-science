<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science with R</title>
    <link>/r-data-science/</link>
    <description>Recent content on Data Science with R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/r-data-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Science with R</title>
      <link>/r-data-science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/</guid>
      <description>R is a programming language used to analyze data. That&amp;rsquo;s all it&amp;rsquo;s good for, and it does this one job very, very well. Any analysis you can think of can be done with R. Because of these features, R has become a very popular tool for data science.
So what&amp;rsquo;s &amp;ldquo;data science&amp;rdquo;? Long story short, it&amp;rsquo;s a buzzword used to describe the relatively new field of applied data analysis. Our data often has valuable information to tell us.</description>
    </item>
    
    <item>
      <title>Basic Syntax</title>
      <link>/r-data-science/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/basics/</guid>
      <description>The most basic use of R is as a simple calculator:
5 + 4 ## [1] 9 1 - 3 ## [1] -2 4 * -2 ## [1] -8 5 / 6 ## [1] 0.8333333 A function in R follows the syntax function_name(argument1, argument2). Functions perform operations on their arguments and return a result. The most basic function is the print() statement.
print(&amp;#39;hello world!&amp;#39;) ## [1] &amp;quot;hello world!&amp;quot; R also gives us access to more complex mathematical funtions.</description>
    </item>
    
    <item>
      <title>Vectors and indexing</title>
      <link>/r-data-science/vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/vectors/</guid>
      <description>R has a special data structure called a vector. A vector is a 1D set of the same type of object. Most often, a vector will simply be a sequence of numbers. We can create a sequence of numbers using the : operator.
numbers &amp;lt;- 1:10 numbers ## [1] 1 2 3 4 5 6 7 8 9 10 Note that vectors are treated the same way as a single element.</description>
    </item>
    
    <item>
      <title>Dataframes</title>
      <link>/r-data-science/dataframes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/dataframes/</guid>
      <description>Vectors and matrices are super cool. However they don’t address an important issue: holding multiple types of data and working with them at the same time. Dataframes are another special data structure that let’s you handle large amounts and different types of data together. Because of this, they are generally the tool-of-choice for doing analyses in R.
We are going to focus on using dataframes using the dplyr package. dplyr comes as part of the tidyverse package bundle, you can install it with install.</description>
    </item>
    
    <item>
      <title>Data analysis with dplyr</title>
      <link>/r-data-science/dplyr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/dplyr/</guid>
      <description>About the rest of this tutorial
There are a million different ways to do things in R. This isn’t Python, where solutions on StackOverflow get ranked on how “Pythonic” they are. If there’s something you like about another workflow in R, there’s nothing stopping you from using it!
In this case, there are three main camps on analyzing dataframes in R:
 “Base R” - “Base R” means using only functions and stuff built into your base R installation.</description>
    </item>
    
    <item>
      <title>Writing functions</title>
      <link>/r-data-science/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/control/</guid>
      <description>Being able to group by and summarize data is great. But so far all we know how to do is use canned functions - ones that come with base R or one of the packages we’ve covered. We’ll need to write our own functions eventually.
Functions in R are defined almost the same as variables. The general syntax looks like this:
name &amp;lt;- function(reqd_arg, optional_arg=42) { # do stuff return(result) } Let’s create a function that adds two numbers together as an example.</description>
    </item>
    
    <item>
      <title>Pretty plots with ggplot2</title>
      <link>/r-data-science/ggplot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/r-data-science/ggplot2/</guid>
      <description>Though this is technically a course on high-performance computing. I would be doing newcomers a disservice if we did not at least quickly cover how plotting works in R. We’ll also be profiling some ggplot2 code in the next section as an example.
ggplot2 is a plotting framework that is (relatively) easy to use, powerful, AND it looks good.
library(ggplot2) # Load the example data data &amp;lt;- msleep str(data) ## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.</description>
    </item>
    
  </channel>
</rss>